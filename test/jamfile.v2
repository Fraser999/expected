# check/libs/checks/test/jamfile.v2

#  Tests using Unit Test Library

# Copyright Pierre Talbot 2013.

# From Copyright 2005: Eric Niebler
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

import testing ;  # Bring in rules for testing
import feature ;

feature.feature iterator_debugging
  : on off
  : composite propagated optional
  ;

feature.compose <iterator_debugging>off
  : <define>_HAS_ITERATOR_DEBUGGING=0
  ;
  
if ! $(BOOST_ROOT)
{
    BOOST_ROOT = [ modules.peek : BOOST_ROOT ] ;
}


# Create an alias for the boost unit test framework. You don't need this
# if you're using minimal or lightweight test.
use-project /boost/test : $(BOOST_ROOT)/libs/test/build ;
alias boost_unit_test : /boost/test//boost_unit_test_framework/<link>static ;
#  alias boost_unit_test : /boost/test//boost_unit_test_framework/<link>shared ;
	
project expected
    : requirements
      <include>. # .cpp files in expected/test.
      <include>../include/ # expected .hpp files.
      <library>boost_unit_test
      
      <link>static
      <toolset>gcc:<cxxflags>-std=c++11
      <toolset>gcc:<cxxflags>-Wno-unused-local-typedefs
      <toolset>clang:<cxxflags>-std=c++11
      <toolset>msvc:<asynch-exceptions>on # Needed for Boost.Test
      <toolset>msvc:<warnings>all
      <toolset>msvc:<define>_SCL_SECURE_NO_WARNINGS
      <toolset>msvc:<define>_SCL_SECURE_NO_DEPRECATE
      <toolset>msvc:<define>_CRT_SECURE_NO_DEPRECATE
      <toolset>msvc:<define>_CRT_SECURE_NO_WARNINGS

      # Warning suppression:
      <toolset>msvc:<cxxflags>/wd4100 # unreferenced formal parameter.

      <toolset>msvc:<iterator_debugging>off
      <toolset>intel-win:<iterator_debugging>off
    ;

test-suite expected
    : 
      [ run test_expected.cpp  boost_unit_test ]
      [ run test_expected2.cpp  boost_unit_test ]
      [ run test_expected_constructor.cpp  boost_unit_test ]
    ;

test-suite algorithms
    : 
      [ run algorithms/test_if_then_else.cpp  boost_unit_test ]
      [ run algorithms/test_value_or.cpp  boost_unit_test ]
      [ run algorithms/test_value_or_call.cpp  boost_unit_test ]
      [ run algorithms/test_error_or.cpp  boost_unit_test ]
      [ run algorithms/test_has_error.cpp  boost_unit_test ]
    ;

test-suite expected_ex
    : 
      [ run ../example/safe_divide.cpp ]
      [ run ../example/num_get.cpp ]
      [ run ../example/num_get_2.cpp ]
      [ run ../example/num_get_3.cpp ]
      [ run ../example/get_interval.cpp ]
    ;

test-suite monads_ex
    : 
      [ run ../example/safe_divide_monad.cpp ]
    ;

test-suite monads_algo
    : 
      [ run monads/algorithms/test_m_value_or.cpp ]
      [ run monads/algorithms/test_m_equal.cpp ]
    ;

explicit fix ;
test-suite fix
    : 
    ;
